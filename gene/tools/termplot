#!/bin/bash
#########################################################
# Terminal-based ASCII plotting of GENE nrg files.      #
# Intended use: quick view of turbulence time evolution #
#   when no X forwarding is available for GDT analysis. #
# Written by M.J. Pueschel. Last edit: Mar 28, 2017.    #
#########################################################
# By default, equidistant time steps are assumed for    #
# efficiency. If adapted time stepping should be used   #
# for nonlinear runs, set adaptivetime=1 below, but     #
# time step mapping will be much slower.                #
adaptivetime=0
#########################################################

if [ $# -eq 3 ]; then
  specind=$3
else
  echo "termplot displays GENE nrg data without an X window"
  echo ""
  echo "usage: termplot [nrg file name] [column index] [species index]"
  echo "  nrg file name [required]: absolute or relative path to nrg file"
  echo "  column index  [optional]: nrg column to display; default 7 (Q_es)"
  echo "  species index [optional]: number of plotted particle species; default 1"
  echo ""

  if [ $# -eq 0 ]; then
    echo "error: must specify nrg file name; exiting..."
    exit
  fi

  echo "info: no species index specified, using 1 (first species)"
  specind=1
fi
if [ $# -ge 2 ]; then
  colind=$2
else
  echo "info: no column index specified, using 7 (Q_es)"
  colind=7
fi

# check whether nrg file exists
nrgfile=$1
if [ ! -f $nrgfile ]; then
  echo "error: $nrgfile does not exist, exiting..."
  exit
fi

# look for corresponding parameters file, nonlinear setting
nrginpwd="`echo $nrgfile | grep '/'`"
if [ -z "$nrginpwd" ]; then
  # nrg is in current dir
  nrgfilepath=""
  runlabel=`echo $nrgfile | sed 's:nrg::g'`
else
  # nrg is in different dir
  nrgfilepath="`echo $nrgfile | sed 's:/nrg.*::g'`/"
  runlabel=`echo $nrgfile | sed 's:.*/nrg::g'`
fi
parfile="${nrgfilepath}parameters$runlabel"
printf "info: attempt to determine linear/nonlinear... "
lindetect=""
nldetect=""
if [ -f $parfile ]; then
  lindetect=`grep nonlinear $parfile | grep F`
  nldetect=`grep nonlinear $parfile | grep T`
fi
if [ -n "$lindetect" ]; then
  ylog=1
  # can use equidistant time step mapping for linear runs
  adaptivetime=0
  printf "found linear\n"
else
  ylog=0
  if [ -n "$nldetect" ]; then
    printf "found nonlinear\n"
  else
    printf "failed\n"
  fi
fi

# analyze first few lines in nrg file to determine species number
# increase nheadnrg for runs with large numbers of species
nheadnrg=8
# lines with time stamps are assumed to have fewer than nlimittime chars
nlimittime=20
timeline2=`head -n $nheadnrg $nrgfile | grep -v -n ".\{$nlimittime,\}" | head -n 2 | tail -n 1`
datline1=`head -n $nheadnrg $nrgfile | grep ".\{$nlimittime,\}" | head -n 1`

nspec=`echo $timeline2 | cut -d':' -f1`
nspec=`expr $nspec - 2`

# ensure user choices for column, species indices are valid
ncol=`echo $datline1 | awk '{print NF}'`
if [ $ncol -lt $colind ]; then
  echo "error: requested column $colind for nrg with $ncol columns; exiting..."
  exit
fi
if [ $nspec -lt $specind ]; then
  echo "error: requested species $specind for nrg with $nspec species; exiting..."
  exit
fi

# need to increment column index due to leading spaces
colind=`expr $colind + 1`

# read data into arrays
read -a timedata <<< `cat $nrgfile | grep -v ".\{$nlimittime,\}"`
# for nrg data, use only data from selected species,
# collapse multiple separating spaces into single ones,
# replace "E+01" type exponents by "*10^01" for bc input
read -a nrgdata <<< `cat $nrgfile | grep ".\{$nlimittime,\}" | sed -n "${specind}~${nspec}p" | sed "s/[\t ][\t ]*/ /g" | cut -d" " -f$colind | sed "s/E/*10^/g" | sed "s/+//g"`

# store terminal window settings
nxwin=`tput cols`
nywin=`tput lines`
nxplot=`expr $nxwin - 4`
nyplot=`expr $nywin - 4`
nxplotmod=`expr $nxplot - 1`
nyplotmod=`expr $nyplot - 1`

# make arrays sparse, storing only one data point per terminal row
nsteps=${#timedata[@]}
if [ $adaptivetime -eq 1 ]; then
  # determine mapping to reflect adaptive time step
  printf "using adaptive time stepping; step mapping make take a while... "

  nstepsmod=`expr $nsteps - 1`
  tmin=${timedata[0]}
  tmax=${timedata[`expr $nsteps - 1`]}
  dtequidistant=`echo "($tmax - $tmin) / $nxplot" | bc -l`

  j=0
  for k in `seq 0 $nstepsmod`; do
    if [ `echo "($j * $dtequidistant) <= ${timedata[$k]}" | bc -l` -eq 1 ]; then
      timedatamod[$j]=${timedata[$k]}
      nrgdatamod[$j]=${nrgdata[$k]}
      j=`expr $j + 1`
    fi
  done

  printf "done\n"
else
  # use linear mapping
  # note: use "... / 1 | bc" without "-l" option for rounding
  sparsefactor=`echo "$nsteps / $nxplot" | bc -l`
  for j in `seq 0 $nxplotmod`; do
    modind=`echo "$j * $sparsefactor" | bc -l`
    modind=`echo "$modind / 1" | bc`
    timedatamod[$j]=${timedata[$modind]}
    nrgdatamod[$j]=${nrgdata[$modind]}
  done
fi
nsteps=$nxplot

# store min/max of time and nrg data arrays
tmin=${timedatamod[0]}
tmax=${timedatamod[`expr $nsteps - 1`]}
nmin=${nrgdatamod[0]}
nmax=$nmin
for j in ${nrgdatamod[@]}; do
  if [ `echo "$j < $nmin" | bc -l` -eq 1 ]; then nmin=$j; fi
  if [ `echo "$j > $nmax" | bc -l` -eq 1 ]; then nmax=$j; fi
done
# round down nmin, round up nmax to fit y axis labels in rows
# (remove exponent, round, reattach exponent)
nminexp=`echo $nmin | cut -d"*" -f 2`
if [ `echo "$nminexp < 10^-20" | bc -l` -eq 1 ]; then nminexp="10^-20"; fi
nmin=`echo "($nmin / $nminexp)" | bc -l`
nmin=`echo "$nmin / 1" | bc`"*$nminexp"
nmaxexp=`echo $nmax | cut -d"*" -f 2`
nmax=`echo "($nmax / $nmaxexp) + 1" | bc -l`
nmax=`echo "$nmax / 1" | bc`"*$nmaxexp"

# prepare string for (vertical) y axis
# note, can view with 'echo "$naxisstr"' (needs quotation marks)
nminlabel=$nmin
if [ "$nminlabel" == "0*10^00" ]; then nminlabel="0"; fi
nminlen=${#nminlabel}
nmaxlen=${#nmax}
naxisspace=`expr $nyplot - $nminlen - $nmaxlen`
naxisstr=${nmax}`printf "%*s%s" $naxisspace ""`$nminlabel
# insert name of nrg column
availtitles=("n^2" "u_par^2" "T_par^2" "T_perp^2" "Gamma_es" "Gamma_em" "Q_es" "Q_em" "Pi_es" "Pi_em")
naxistitle=${availtitles[`expr $colind - 2`]}

# for linear runs, use log plot
# base-10 log in bc is "l(...) / l(10)"
if [ $ylog -eq 1 ]; then
  # ignore values below 10^-4 for log plots
  loglimit="-4"
  for j in `seq 1 $nsteps`; do
    jmod=`expr $j - 1`
    nrgdatamod[$jmod]=`echo "l(${nrgdatamod[$jmod]}) / l(10)" | bc -l`
    if [ `echo "${nrgdatamod[$jmod]} < $loglimit" | bc -l` -eq 1 ]; then nrgdatamod[$jmod]=$loglimit; fi
  done
  nmin=`echo "l($nmin) / l(10)" | bc -l`
  nmax=`echo "l($nmax) / l(10)" | bc -l`
  if [ `echo "$nmin < $loglimit" | bc -l` -eq 1 ]; then nmin=$loglimit; fi

  naxistitle="log $naxistitle"
fi

# remormalize time and nrg data to terminal char positions
tnormfactor=`echo "$nxplotmod / ($tmax - $tmin)" | bc -l`
nnormfactor=`echo "$nyplotmod / ($nmax - $nmin)" | bc -l`
for j in `seq 1 $nsteps`; do
  jmod=`expr $j - 1`
  temp=`echo "(${timedatamod[$jmod]} - $tmin) * $tnormfactor" | bc -l`
  tdatnorm[$jmod]=`echo "$temp / 1" | bc`
  temp=`echo "(${nrgdatamod[$jmod]} - $nmin) * $nnormfactor" | bc -l`
  ndatnorm[$jmod]=`echo "$temp / 1" | bc`
done

# plot data using printf commands
for j in `seq 1 $nyplot`; do
  # add y axis with title/labels
  if [ $j -le ${#naxistitle} ]; then
    printf "${naxistitle:`expr $j - 1`:1}"
  else
    printf " "
  fi
  # printf does not accept a string starting with "-",
  # so a space plut backspace is inserted at the beginning
  printf " \b${naxisstr:`expr $j - 1`:1}|"

  # compose line of data point for row j
  jmod=`expr $nyplot - $j`
  printline=""
  for k in `seq 0 $nxplotmod`; do
    if [ "${ndatnorm[$k]}" -eq "$jmod" ]; then
      # filled position (curve passes location)
      printline="${printline}*"
    else
      # empty position (curve misses location)
      printline="${printline} "
    fi
  done
  printf "$printline\n"
done

# add x axis with time labels/title
tminlen=${#tmin}
tmaxlen=${#tmax}
taxisspace=`expr $nxplot - $tminlen - $tmaxlen`
printf "  +"
for j in `seq 0 $nxplotmod`; do printf "-"; done
printf "\n"
printf "   $tmin"
# print string with multiple spaces
printf "%*s%s" $taxisspace ""
printf "$tmax\n"
printf "   time "
if [ "$adaptivetime" -eq 1 ]; then
  printf "(adaptive dt)\n"
else
  printf "(equidistant dt)\n"
fi
