#!/bin/bash

#echo "Starting commit_message_policy"
set -e
set -u

set -o pipefail

refname=$1
oldrev=$(git rev-parse $2)
newrev=$(git rev-parse $3)

#echo "refname=$refname, oldrev=$oldrev, newrev=$newrev"

function update_type() {
	# --- Interpret
	# 0000->1234 (create)
	# 1234->2345 (update)
	# 2345->0000 (delete)
	if expr "$oldrev" : '0*$' >/dev/null
	then
		echo "create"
	else
		if expr "$newrev" : '0*$' >/dev/null
		then
			echo "delete"
		else
			echo "update"
		fi
	fi
}

function new_revisions() {
	# This shows all log entries that are not already covered by
	# another ref - i.e. commits that are now accessible from this
	# ref that were previously not accessible
	# (see generate_update_branch_email for the explanation of this
	# command)

	# Revision range passed to rev-list differs for new vs. updated
	# branches.
	if [ "$change_type" = create ]
	then
		# Show all revisions exclusive to this (new) branch.
		revspec=$newrev
	else
		# Branch update; show revisions not part of $oldrev.
		revspec=$oldrev..$newrev
	fi

	other_branches=$(git for-each-ref --format='%(refname)' refs/heads/ | grep -F -v $refname)
	if [ -n "$other_branches" ] ; then
		extra_args="--not $other_branches"
	else
		extra_args=""
	fi
	git rev-parse $extra_args | git rev-list --stdin $revspec --reverse
}

allowed="physics algorithm optimization tools diag_idl diag_python diag_src cleanup makefile merge"
too_long=100
warn_length=70

helped=0

function tag_help() {
	if [ $helped = 0 ] ; then
		cat <<-EOF
 The GENE commit policy mandates that every commit subject must
 start with tag1,tag2,...: marker

 Allowed tags are:

  - physics       The basic equations implemented changed.

  - algorithm     The way of implementing the basic equations
                  changed.

  - optimization  Changes which do not affect the results but
                  improve performance.

  - tools         Changes affect pre- or postprocessing which
                  is not one of the following diagnostics.

  - diag_IDL	   Changes in the IDL diagnostics

  - diag_python   Changes in python diagnostics

  - diag_src      Changes of diagnostic routines in the Fortran
                  code

  - cleanup       Improve readability of the code, fix typos, 
                  change comments

  - makefile      Everything affecting the build procedure

  - merge         A git merge. Just resolve all conflicts and then
                  commit. 

 If your commit does not match any of these categories, please
 consult one of the senior scientists for advice.
 
EOF
	fi
	helped=1
}

printed_header=0
function print_header() {
	if [ $printed_header = 0 ] ; then
		echo "======================================================================"
		echo "Commit ${rev::7} (${subject::70}) has issues:"
		echo
	fi
	printed_header=1
}

change_type=$(update_type)
#echo "change_type = $change_type"

if [ "$change_type" != "delete" ] ; then
	# Check all new commits for commit policy
	# regard all previously accessible commits as good
	ret=0
	for rev in $(new_revisions); do
		printed_header=0
		subject=$(git log -1 $rev --format=%s)
		#tags=$(perl -pe 's/.*?(\[([^\[\]]*)\])?$/$2/; s/,/ /g;' <<< $subject)
		#bare_subject=$(perl -pe 's/(.*?)(\[[^\[\]]*\])?$/$1/' <<< $subject)
		#echo "subject=|$subject|"
		temp_tags=$(sed -n -e 's/^\([^:]*\):.*$/\1/p' <<< $subject)
		#echo "temp_tags = |$temp_tags|"
		if [ -n "$temp_tags" ]; then
		    tags=$(sed -e 's/,/ /g' <<< $temp_tags | tr [:upper:] [:lower:])
		else
		    tags=""
		fi
		#echo "tags = |$tags|"
		bare_subject=$(sed -n -e 's/^[^:]*:\(.*\)$/\1/p' <<< $subject)
		if [ ${#bare_subject} -gt $too_long ] ; then
			print_header

			echo "ERROR: Your commit subject is way too long ( >${too_long} characters)"
			echo "   please shorten it and push again."
			
			echo "A commit message should have the following format:"
			echo "-----------------------------------------------------------------------------"
			echo "|keyword A, keyword B,...: A subject not longer that ${too_long} characters |"
			echo "| ---- an empty line ----                                                   |"
			echo "|The necessary description of the commit. As many lines as needed.          |"
			echo "| ...                                                                       |"
			echo "-----------------------------------------------------------------------------"

			ret=1
		elif [ ${#bare_subject} -gt $warn_length ] ; then
			print_header
			echo "  WARNING: Your commit subject is rather long (>$warn_length characters)"
			echo "    please consider shorter subjects in the future!"
			echo
		fi

		if [ -z "$tags" ] ; then
			print_header
			echo "  ERROR: Your commit subject does not specify any tags!"
			echo
			tag_help
			ret=1
		else
		    for tag in $tags; do
			#echo "Working on tag |$tag|"
			matched=0
			for ta in $allowed ; do
			    #echo "Testing |$ta| against |$tag|"
			    if [ "$ta" == "$tag" ]; then
				#echo "is equal"
				matched=1
				break
			    #else
				#echo "is not equal"
			    fi
			done
			#if ! grep -i -q "$tag" <<< $allowed ; then
			if [ $matched -eq 0 ]; then
			    print_header
			    echo "  ERROR: Unknown tag \"$tag\" used in commit message!"
			    echo
			    tag_help
			    ret=1
			fi
		    done
		fi

	done
	if [ $ret != 0 ] ; then
		echo "Aborting push of $refname"
		echo
		exit 1;
	fi
fi

exit 0;
